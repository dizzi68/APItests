import requests

#dictionary to hold extra headers
HEADERS = {"X-API-Key":''}

clanID = ""
clanGeneralURL = "https://www.bungie.net/Platform/GroupV2/" + clanID
clanMembersURL = "https://www.bungie.net/Platform/GroupV2/" + clanID + "/Members/"
clanInfo = requests.get(clanGeneralURL, headers=HEADERS)
clanMemberInfo = requests.get(clanMembersURL, headers=HEADERS)
clanMemberStr = clanMemberInfo.json()

# Basic clan info
def clanRundown():
    print(
    " Name:", getClanName(), "\n",
    "Motto:", getClanMotto(), "\n",
    "Founder:", getClanFounder(), "\n",
    "Number of Members:", getNumberMem(), "\n",
    )

# Getter for number of members
def getNumberMem():
    number = 0
    for each in clanMemberStr["Response"]["results"]:
        number = number+1
    return number       

# Getter for clan founder
def getClanFounder():
    for each in clanMemberStr["Response"]["results"]:
        if (each['memberType'] == 5):
            founder = each["destinyUserInfo"]["displayName"]
            break
    return founder

# Prints a roster along with identifiable numbers and role for each member
# This number is just the index, which works well with other functions
def roster():
    for each in clanMemberStr["Response"]["results"]:
        if (each['memberType'] == 1):
            print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is a beginner.")
        elif (each['memberType'] == 2):
            print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is a member.")
        elif (each['memberType'] == 3):
            print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is an admin.")
        elif (each['memberType'] == 4):
            print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is an acting founder.")
        elif (each['memberType'] == 5):
            print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is the founder.")
        # The above should cover all the basics, below if 0 populates
        # or if additional roles are added
        else:
            print("Um...who are you,", each["destinyUserInfo"]["displayName"], "?")

# Prints just the admins, noting the founder
def clanAdmin():
    print("\n Admins: \n")
    for each in clanMemberStr["Response"]["results"]:
        if (each['memberType'] == 3):
            print("    ", each['destinyUserInfo']['displayName'])
        if (each['memberType'] == 5):
            print("    ", each['destinyUserInfo']['displayName'], "(Founder)")


# Gathers the clan ID and refreshes the data the first time menu is called, then any time the clan is changed
def inputClanID():
    global clanID
    clanID = input("Enter clan group ID: ")
    # Reset all variables, requests that use clan ID to new clan ID
    refresh()

# Getter for clan name
def getClanName():
    return clanGenStr["Response"]["detail"]["name"]

# Getter for clan motto
def getClanMotto():
    return clanGenStr["Response"]["detail"]["motto"]

# Prints a short list of member specific info
def getMemberInfo():
    global activeMember
    inNum = input("Enter number from roster: ")
    # Create location to store current member, for use in other functions
    activeMember = int(inNum)
    print()
    # Name
    print("    Destiny Name:", getMemberName())
    # Role
    print("    Role:", getMemberRole())
    # Accounts - Loops through returned array to account for multiple playable accounts
    print("    Accounts:\n     ", getMemberAccounts())
    # Online Status
    if (clanMemberStr["Response"]["results"][activeMember]["isOnline"]):
        print("    Currently online")
    else:
        print("    Currently offline")

# Pulls up the names of whomever is online. Must use the refresh menu option for updated list
def clanOnline():
    print("\n    Online Players:")
    for each in clanMemberStr["Response"]["results"]:
        if each["isOnline"] == True:
            print("      ", each["destinyUserInfo"]["displayName"])

######TODO######
# Option to get additional info about an individual member
# WIP
def memberMenu():
    global activeMember
    mType = str(clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["membershipType"])
    mID = str(clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["membershipId"])
    compValue = "100"
    params = "?components=" + compValue
    memberURL = "https://www.bungie.net/Platform/Destiny2/" + mType + "/Profile/" + mID + "/" + params
    memberInfo = requests.get(memberURL, headers=HEADERS)
    memberStr = memberInfo.json()
    print(memberStr)
    print(memberURL)
    print("\n")

# Prevents auto-refreshing too often, given the amount of data gathered
# Requires manual refresh for up to date items like online status,
# but maintains speed when looking up other, effectively static info already gathered
# Included in other functions when auto refresh is obviously needed ie new clan
def refresh():
    global clanID
    global clanMembersURL
    global clanMemberInfo
    global clanMemberStr
    clanMembersURL = "https://www.bungie.net/Platform/GroupV2/" + clanID + "/Members/"
    clanMemberInfo = requests.get(clanMembersURL, headers=HEADERS);
    clanMemberStr = clanMemberInfo.json()
    global clanGeneralURL
    global clanInfo
    global clanGenStr
    clanGeneralURL = "https://www.bungie.net/Platform/GroupV2/" + clanID
    clanInfo = requests.get(clanGeneralURL, headers=HEADERS)
    clanGenStr = clanInfo.json()

# Getter for member name
def getMemberName():
    memberName = clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["displayName"]
    return memberName

# Getter for member role
def getMemberRole():
    if (clanMemberStr["Response"]["results"][activeMember]["memberType"] == 1):
        return "Beginner"
    elif (clanMemberStr["Response"]["results"][activeMember]["memberType"] == 2):
        return "Member"
    elif (clanMemberStr["Response"]["results"][activeMember]["memberType"] == 3):
        return "Admin"
    elif (clanMemberStr["Response"]["results"][activeMember]["memberType"] == 4):
        return "Acting Founder"
    elif (clanMemberStr["Response"]["results"][activeMember]["memberType"] == 5):
        return "Founder"
    else:
        return "No role found"

# Getter for member accounts. Returns array as there may be multiple
def getMemberAccounts():
    global activeMember
    accounts = []
    for each in clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["applicableMembershipTypes"]:
        if (each == 1):
            accounts.append("Xbox")
        elif (each == 2):
            accounts.append("PlayStation")
        elif (each == 3):
            accounts.append("Steam")
        elif (each == 4):
            accounts.append("Battle.net") # Deprecated?
        elif (each == 5):
            accounts.append("Stadia")
        elif (each == 10):
            accounts.append("Demon...?")
        elif (each == 254):
            accounts.append("Bungie Next")
        else:
            accounts.append("Unknown")
    return accounts

# Base menu
def menu():
    global clanID
    if clanID == "":
        # If clanID hasn't been initialized ie first time menu() called
        inputClanID()
        menu()
    else:
        selection = True
        while selection:
            # Print clan name, menu
            print("\n")
            print(
            "    ",
            getClanName(),
            "\n",
            "      ",
            getClanMotto(),
            """
            1. Clan Info
            2. Roster
            3. Member Info
            4. Admin List
            5. Players Online
            6. Refresh Info
            7. Change Clan
            0. Exit Menu
            00. Exit Python
            """)
            selection = input("Enter selection: ")
            if (selection == "1"):
                clanRundown()
            elif (selection == "2"):
                roster()
            elif (selection == "3"):
                getMemberInfo()
            elif (selection == "4"):
                clanAdmin()
            elif (selection == "5"):
                clanOnline()
            elif (selection == "6"):
                refresh()
            elif (selection == "7"):
                inputClanID()
            elif (selection == "0"):
                selection = None
            elif (selection == "00"):
                quit()
            else:
                print("Invalid Selection")
                menu()

menu()
