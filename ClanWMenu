import requests

#dictionary to hold extra headers
HEADERS = {"X-API-Key":''}

clanID = ""
clanGeneralURL = "https://www.bungie.net/Platform/GroupV2/" + clanID
clanMembersURL = "https://www.bungie.net/Platform/GroupV2/" + clanID + "/Members/"
clanInfo = requests.get(clanGeneralURL, headers=HEADERS)
clanMemberInfo = requests.get(clanMembersURL, headers=HEADERS)
clanMemberStr = clanMemberInfo.json()
mType = 0
mID = 0
memberURL = "https://www.bungie.net/Platform/Destiny2/" + mType + "/Profile/" + mID + "/" + params
memberInfo = requests.get(memberURL, headers=HEADERS)
memberStr = memberInfo.json()

# Basic clan info
def clanRundown():
    print(
    " Name:", getClanName(), "\n",
    "Motto:", getClanMotto(), "\n",
    "Founder:", getClanFounder(), "\n",
    "Number of Members:", getNumberMem(), "\n",
    )

# Getter for number of members
def getNumberMem():
    number = 0
    for each in clanMemberStr["Response"]["results"]:
        number = number+1
    return number       

# Getter for clan founder
def getClanFounder():
    for each in clanMemberStr["Response"]["results"]:
        if (each['memberType'] == 5):
            founder = each["destinyUserInfo"]["displayName"]
            break
    return founder

# Prints a roster along with identifiable numbers and role for each member
# This number is just the index, which works well with other functions
def roster():
    for each in clanMemberStr["Response"]["results"]:
        memType = each["memberType"]
        match memType:
            case 1:
                print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is a beginner.")
            case 2:
                print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is a member.")
            case 3:
                print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is an admin.")
            case 4:
                print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is an acting founder.")
            case 5:
                print(clanMemberStr["Response"]["results"].index(each), each["destinyUserInfo"]["displayName"], "is the founder.")
            case _:
                print("Well this is embarrassing...", each["destinyUserInfo"]["displayName"], "has no role.")

# Prints just the admins, noting the founder
def clanAdmin():
    print("\n Admins: \n")
    for each in clanMemberStr["Response"]["results"]:
        if (each['memberType'] == 3):
            print("    ", each['destinyUserInfo']['displayName'])
        if (each['memberType'] == 5):
            print("    ", each['destinyUserInfo']['displayName'], "(Founder)")


# Gathers the clan ID and refreshes the data the first time menu is called, then any time the clan is changed
def inputClanID():
    global clanID
    clanID = input("Enter clan group ID: ")
    # Reset all variables, requests that use clan ID to new clan ID
    refresh()

# Getter for clan name
def getClanName():
    return clanGenStr["Response"]["detail"]["name"]

# Getter for clan motto
def getClanMotto():
    return clanGenStr["Response"]["detail"]["motto"]

# Prints a short list of member specific info
def getMemberInfo():
    global activeMember
    inNum = input("Enter number from roster: ")
    # Create location to store current member, for use in other functions
    activeMember = int(inNum)
    print()
    # Name
    print("    Destiny Name:", getMemberName())
    # Role
    print("    Role:", getMemberRole())
    # Accounts - Loops through returned array to account for multiple playable accounts
    print("    Accounts:\n     ", getMemberAccounts())
    # Online Status
    if (clanMemberStr["Response"]["results"][activeMember]["isOnline"]):
        print("    Currently online")
    else:
        print("    Currently offline")
    memberMenu()

# Pulls up the names of whomever is online. Must use the refresh menu option for updated list
def clanOnline():
    print("\n    Online Players:")
    for each in clanMemberStr["Response"]["results"]:
        if each["isOnline"] == True:
            print("      ", each["destinyUserInfo"]["displayName"])

def memberMenu():
    global activeMember
    global memberStr
    global mType
    global mID
    mType = str(clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["membershipType"])
    mID = str(clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["membershipId"])
    compValue = "200"
    params = "?components=" + compValue
    memberURL = "https://www.bungie.net/Platform/Destiny2/" + mType + "/Profile/" + mID + "/" + params
    memberInfo = requests.get(memberURL, headers=HEADERS)
    memberStr = memberInfo.json()
    print("\n")
    selection = True
    print(memberStr)
    while selection:
        print(getMemberName())
        print("""
            1. Characters
            0. Main Menu
            """)
        selection = input("Enter selection: ")
        print()
        match selection:
            case "1":
                charInfo()
            
            
            case "0":
                selection = False
            case _:
                print("Invalid Selection")

def charInfo():
    global memberStr
    for each in memberStr["Response"]["characters"]["data"]:
        cRace = memberStr["Response"]["characters"]["data"][each]["raceType"]
        match cRace:
            case 0:
                race = "Human"
            case 1:
                race = "Awoken"
            case 2:
                race = "Exo"
        cClass = memberStr["Response"]["characters"]["data"][each]["classType"]
        match cClass:
            case 0:
                classT = "Titan"
            case 1:
                classT = "Hunter"
            case 2:
                classT = "Warlock"
        cGender = memberStr["Response"]["characters"]["data"][each]["genderType"]
        match cGender:
            case 0:
                gender = "Male"
            case 1:
                gender = "Female"
        minutesPlayed = int(memberStr["Response"]["characters"]["data"][each]["minutesPlayedTotal"])
        hoursPlayed = int(minutesPlayed/60)
        minutesRemPlayed = (minutesPlayed%60)
        print(gender, race, classT)
        print("Power level:", memberStr["Response"]["characters"]["data"][each]["light"])
        print("Time played:", hoursPlayed, "hours and", minutesRemPlayed, "minutes\n")

# Prevents auto-refreshing too often, given the amount of data gathered
# Requires manual refresh for up to date items like online status,
# but maintains speed when looking up other, effectively static info already gathered
# Included in other functions when auto refresh is obviously needed ie new clan
def refresh():
    global clanID
    global clanMembersURL
    global clanMemberInfo
    global clanMemberStr
    clanMembersURL = "https://www.bungie.net/Platform/GroupV2/" + clanID + "/Members/"
    clanMemberInfo = requests.get(clanMembersURL, headers=HEADERS);
    clanMemberStr = clanMemberInfo.json()
    global clanGeneralURL
    global clanInfo
    global clanGenStr
    clanGeneralURL = "https://www.bungie.net/Platform/GroupV2/" + clanID
    clanInfo = requests.get(clanGeneralURL, headers=HEADERS)
    clanGenStr = clanInfo.json()

# Getter for member name
def getMemberName():
    memberName = clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["displayName"]
    return memberName

# Getter for member role
def getMemberRole():
    memberType = clanMemberStr["Response"]["results"][activeMember]["memberType"]
    match memberType:
        case 1:
            return "Beginner"
        case 2:
            return "Member"
        case 3:
            return "Admin"
        case 4:
            return "Acting Founder"
        case 5:
            return "Founder"
        case _:
            return "Role not found"

# Getter for member accounts. Returns array as there may be multiple
def getMemberAccounts():
    global activeMember
    accounts = []
    platform = clanMemberStr["Response"]["results"][activeMember]["destinyUserInfo"]["applicableMembershipTypes"]
    match platform:
        case 1:
            accounts.append("Xbox")
        case 2:
            accounts.append("PlayStation")
        case 3:
            accounts.append("Steam")
        case 4:
            accounts.append("Battle.net") # Deprecated?
        case 5:
            accounts.append("Stadia")
        case 10:
            accounts.append("Demon...?")
        case 254:
            accounts.append("Bungie Next")
        case _:
            accounts.append("Unknown")
    return accounts
   

# Base menu
def menu():
    global clanID
    if clanID == "":
        # If clanID hasn't been initialized ie first time menu() called
        inputClanID()
        menu()
    else:
        selection = True
        while selection:
            # Print clan name, menu
            print("\n")
            print(
            "    ",
            getClanName(),
            "\n",
            "      ",
            getClanMotto(),
            """
            1. Clan Info
            2. Roster
            3. Member Info
            4. Admin List
            5. Players Online
            6. Refresh Info
            7. Change Clan
            0. Exit Menu
            00. Exit Python
            """)
            selection = input("Enter selection: ")
            print()
            match selection:
                case "1":
                    clanRundown()
                case "2":
                    roster()
                case "3":
                    getMemberInfo()
                case "4":
                    clanAdmin()
                case "5":
                    clanOnline()
                case "6":
                    refresh()
                case "7":
                    inputClanID()
                case "0":
                    selection = None
                case "00":
                    quit()
                case _:
                    print("Invalid Selection")
                    menu()

menu()
